// This file was automatically generated by ctpgen
package ctp

//#include "gen_md_api.h"
import "C"

//import "unsafe"

func CThostFtdcMdSpiCValue(ptr CThostFtdcMdSpi) C.mdSpi {
	v := storeGoPtr(ptr)
	p := C.md_new_spi(C.uint64_t(v))
	return p
}

type CThostFtdcMdApi struct {
	p C.mdApi
}

func MdCreateFtdcMdApi(pszFlowPath string, bIsUsingUdp bool, bIsMulticast bool) *CThostFtdcMdApi {
	cpszFlowPath := go2cStrPtr(pszFlowPath)
	cbIsUsingUdp := go2cBool(bIsUsingUdp)
	cbIsMulticast := go2cBool(bIsMulticast)
	cRet := C.md_create_ftdc_md_api(cpszFlowPath, cbIsUsingUdp, cbIsMulticast)
	ret := new(CThostFtdcMdApi)
	ret.p = cRet
	return ret
}

func MdGetApiVersion() string {
	cRet := C.md_get_api_version()
	ret := cPtr2GoStr(cRet)
	return ret
}

func (a *CThostFtdcMdApi) Release() {

	C.md_release(a.p)

}

func (a *CThostFtdcMdApi) Init() {

	C.md_init(a.p)

}

func (a *CThostFtdcMdApi) Join() int {

	ret := C.md_join(a.p)

	return int(ret)
}

func (a *CThostFtdcMdApi) GetTradingDay() string {

	ret := C.md_get_trading_day(a.p)

	return cPtr2GoStr(ret)
}

func (a *CThostFtdcMdApi) RegisterFront(pszFrontAddress string) {
	cpszFrontAddress := go2cStrPtr(pszFrontAddress)
	defer func() {

	}()

	C.md_register_front(a.p, cpszFrontAddress)

}

func (a *CThostFtdcMdApi) RegisterNameServer(pszNsAddress string) {
	cpszNsAddress := go2cStrPtr(pszNsAddress)
	defer func() {

	}()

	C.md_register_name_server(a.p, cpszNsAddress)

}

func (a *CThostFtdcMdApi) RegisterFensUserInfo(pFensUserInfo *CThostFtdcFensUserInfoField) {
	cpFensUserInfo := CThostFtdcFensUserInfoFieldCValue(pFensUserInfo)
	defer func() {

	}()

	C.md_register_fens_user_info(a.p, cpFensUserInfo)

}

func (a *CThostFtdcMdApi) RegisterSpi(pSpi CThostFtdcMdSpi) {
	cpSpi := CThostFtdcMdSpiCValue(pSpi)
	defer func() {

	}()

	C.md_register_spi(a.p, cpSpi)

}

func (a *CThostFtdcMdApi) SubscribeMarketData(strs []string) int {
	cStr := go2cStrArray(strs)
	nCount := C.int(len(strs))
	defer func() {
		freeCStrArray(cStr, len(strs))
	}()

	ret := C.md_subscribe_market_data(a.p, cStr, nCount)
	return int(ret)
}

func (a *CThostFtdcMdApi) UnSubscribeMarketData(strs []string) int {
	cStr := go2cStrArray(strs)
	nCount := C.int(len(strs))
	defer func() {
		freeCStrArray(cStr, len(strs))
	}()

	ret := C.md_un_subscribe_market_data(a.p, cStr, nCount)
	return int(ret)
}

func (a *CThostFtdcMdApi) SubscribeForQuoteRsp(strs []string) int {
	cStr := go2cStrArray(strs)
	nCount := C.int(len(strs))
	defer func() {
		freeCStrArray(cStr, len(strs))
	}()

	ret := C.md_subscribe_for_quote_rsp(a.p, cStr, nCount)
	return int(ret)
}

func (a *CThostFtdcMdApi) UnSubscribeForQuoteRsp(strs []string) int {
	cStr := go2cStrArray(strs)
	nCount := C.int(len(strs))
	defer func() {
		freeCStrArray(cStr, len(strs))
	}()

	ret := C.md_un_subscribe_for_quote_rsp(a.p, cStr, nCount)
	return int(ret)
}

func (a *CThostFtdcMdApi) ReqUserLogin(pReqUserLoginField *CThostFtdcReqUserLoginField, nRequestID int) int {
	cpReqUserLoginField := CThostFtdcReqUserLoginFieldCValue(pReqUserLoginField)
	defer func() {

	}()
	cnRequestID := C.int(nRequestID)

	ret := C.md_req_user_login(a.p, cpReqUserLoginField, cnRequestID)

	return int(ret)
}

func (a *CThostFtdcMdApi) ReqUserLogout(pUserLogout *CThostFtdcUserLogoutField, nRequestID int) int {
	cpUserLogout := CThostFtdcUserLogoutFieldCValue(pUserLogout)
	defer func() {

	}()
	cnRequestID := C.int(nRequestID)

	ret := C.md_req_user_logout(a.p, cpUserLogout, cnRequestID)

	return int(ret)
}

func (a *CThostFtdcMdApi) ReqQryMulticastInstrument(pQryMulticastInstrument *CThostFtdcQryMulticastInstrumentField, nRequestID int) int {
	cpQryMulticastInstrument := CThostFtdcQryMulticastInstrumentFieldCValue(pQryMulticastInstrument)
	defer func() {

	}()
	cnRequestID := C.int(nRequestID)

	ret := C.md_req_qry_multicast_instrument(a.p, cpQryMulticastInstrument, cnRequestID)

	return int(ret)
}
