// This file was automatically generated by ctpgen
#include "gen_td_spi.h"

extern "C"{

  void tdOnFrontConnected(uint64_t ptr);

  void tdOnFrontDisconnected(uint64_t ptr,int nReason);

  void tdOnHeartBeatWarning(uint64_t ptr,int nTimeLapse);

  void tdOnRspAuthenticate(uint64_t ptr,CThostFtdcRspAuthenticateField * pRspAuthenticateField,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspUserLogin(uint64_t ptr,CThostFtdcRspUserLoginField * pRspUserLogin,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspUserLogout(uint64_t ptr,CThostFtdcUserLogoutField * pUserLogout,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspUserPasswordUpdate(uint64_t ptr,CThostFtdcUserPasswordUpdateField * pUserPasswordUpdate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspTradingAccountPasswordUpdate(uint64_t ptr,CThostFtdcTradingAccountPasswordUpdateField * pTradingAccountPasswordUpdate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspUserAuthMethod(uint64_t ptr,CThostFtdcRspUserAuthMethodField * pRspUserAuthMethod,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspGenUserCaptcha(uint64_t ptr,CThostFtdcRspGenUserCaptchaField * pRspGenUserCaptcha,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspGenUserText(uint64_t ptr,CThostFtdcRspGenUserTextField * pRspGenUserText,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspOrderInsert(uint64_t ptr,CThostFtdcInputOrderField * pInputOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspParkedOrderInsert(uint64_t ptr,CThostFtdcParkedOrderField * pParkedOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspParkedOrderAction(uint64_t ptr,CThostFtdcParkedOrderActionField * pParkedOrderAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspOrderAction(uint64_t ptr,CThostFtdcInputOrderActionField * pInputOrderAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryMaxOrderVolume(uint64_t ptr,CThostFtdcQryMaxOrderVolumeField * pQryMaxOrderVolume,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspSettlementInfoConfirm(uint64_t ptr,CThostFtdcSettlementInfoConfirmField * pSettlementInfoConfirm,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspRemoveParkedOrder(uint64_t ptr,CThostFtdcRemoveParkedOrderField * pRemoveParkedOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspRemoveParkedOrderAction(uint64_t ptr,CThostFtdcRemoveParkedOrderActionField * pRemoveParkedOrderAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspExecOrderInsert(uint64_t ptr,CThostFtdcInputExecOrderField * pInputExecOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspExecOrderAction(uint64_t ptr,CThostFtdcInputExecOrderActionField * pInputExecOrderAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspForQuoteInsert(uint64_t ptr,CThostFtdcInputForQuoteField * pInputForQuote,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQuoteInsert(uint64_t ptr,CThostFtdcInputQuoteField * pInputQuote,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQuoteAction(uint64_t ptr,CThostFtdcInputQuoteActionField * pInputQuoteAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspBatchOrderAction(uint64_t ptr,CThostFtdcInputBatchOrderActionField * pInputBatchOrderAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspOptionSelfCloseInsert(uint64_t ptr,CThostFtdcInputOptionSelfCloseField * pInputOptionSelfClose,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspOptionSelfCloseAction(uint64_t ptr,CThostFtdcInputOptionSelfCloseActionField * pInputOptionSelfCloseAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspCombActionInsert(uint64_t ptr,CThostFtdcInputCombActionField * pInputCombAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryOrder(uint64_t ptr,CThostFtdcOrderField * pOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryTrade(uint64_t ptr,CThostFtdcTradeField * pTrade,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryInvestorPosition(uint64_t ptr,CThostFtdcInvestorPositionField * pInvestorPosition,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryTradingAccount(uint64_t ptr,CThostFtdcTradingAccountField * pTradingAccount,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryInvestor(uint64_t ptr,CThostFtdcInvestorField * pInvestor,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryTradingCode(uint64_t ptr,CThostFtdcTradingCodeField * pTradingCode,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryInstrumentMarginRate(uint64_t ptr,CThostFtdcInstrumentMarginRateField * pInstrumentMarginRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryInstrumentCommissionRate(uint64_t ptr,CThostFtdcInstrumentCommissionRateField * pInstrumentCommissionRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryExchange(uint64_t ptr,CThostFtdcExchangeField * pExchange,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryProduct(uint64_t ptr,CThostFtdcProductField * pProduct,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryInstrument(uint64_t ptr,CThostFtdcInstrumentField * pInstrument,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryDepthMarketData(uint64_t ptr,CThostFtdcDepthMarketDataField * pDepthMarketData,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryTraderOffer(uint64_t ptr,CThostFtdcTraderOfferField * pTraderOffer,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQrySettlementInfo(uint64_t ptr,CThostFtdcSettlementInfoField * pSettlementInfo,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryTransferBank(uint64_t ptr,CThostFtdcTransferBankField * pTransferBank,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryInvestorPositionDetail(uint64_t ptr,CThostFtdcInvestorPositionDetailField * pInvestorPositionDetail,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryNotice(uint64_t ptr,CThostFtdcNoticeField * pNotice,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQrySettlementInfoConfirm(uint64_t ptr,CThostFtdcSettlementInfoConfirmField * pSettlementInfoConfirm,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryInvestorPositionCombineDetail(uint64_t ptr,CThostFtdcInvestorPositionCombineDetailField * pInvestorPositionCombineDetail,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryCFMMCTradingAccountKey(uint64_t ptr,CThostFtdcCFMMCTradingAccountKeyField * pCFMMCTradingAccountKey,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryEWarrantOffset(uint64_t ptr,CThostFtdcEWarrantOffsetField * pEWarrantOffset,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryInvestorProductGroupMargin(uint64_t ptr,CThostFtdcInvestorProductGroupMarginField * pInvestorProductGroupMargin,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryExchangeMarginRate(uint64_t ptr,CThostFtdcExchangeMarginRateField * pExchangeMarginRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryExchangeMarginRateAdjust(uint64_t ptr,CThostFtdcExchangeMarginRateAdjustField * pExchangeMarginRateAdjust,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryExchangeRate(uint64_t ptr,CThostFtdcExchangeRateField * pExchangeRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQrySecAgentACIDMap(uint64_t ptr,CThostFtdcSecAgentACIDMapField * pSecAgentACIDMap,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryProductExchRate(uint64_t ptr,CThostFtdcProductExchRateField * pProductExchRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryProductGroup(uint64_t ptr,CThostFtdcProductGroupField * pProductGroup,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryMMInstrumentCommissionRate(uint64_t ptr,CThostFtdcMMInstrumentCommissionRateField * pMMInstrumentCommissionRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryMMOptionInstrCommRate(uint64_t ptr,CThostFtdcMMOptionInstrCommRateField * pMMOptionInstrCommRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryInstrumentOrderCommRate(uint64_t ptr,CThostFtdcInstrumentOrderCommRateField * pInstrumentOrderCommRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQrySecAgentTradingAccount(uint64_t ptr,CThostFtdcTradingAccountField * pTradingAccount,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQrySecAgentCheckMode(uint64_t ptr,CThostFtdcSecAgentCheckModeField * pSecAgentCheckMode,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQrySecAgentTradeInfo(uint64_t ptr,CThostFtdcSecAgentTradeInfoField * pSecAgentTradeInfo,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryOptionInstrTradeCost(uint64_t ptr,CThostFtdcOptionInstrTradeCostField * pOptionInstrTradeCost,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryOptionInstrCommRate(uint64_t ptr,CThostFtdcOptionInstrCommRateField * pOptionInstrCommRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryExecOrder(uint64_t ptr,CThostFtdcExecOrderField * pExecOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryForQuote(uint64_t ptr,CThostFtdcForQuoteField * pForQuote,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryQuote(uint64_t ptr,CThostFtdcQuoteField * pQuote,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryOptionSelfClose(uint64_t ptr,CThostFtdcOptionSelfCloseField * pOptionSelfClose,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryInvestUnit(uint64_t ptr,CThostFtdcInvestUnitField * pInvestUnit,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryCombInstrumentGuard(uint64_t ptr,CThostFtdcCombInstrumentGuardField * pCombInstrumentGuard,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryCombAction(uint64_t ptr,CThostFtdcCombActionField * pCombAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryTransferSerial(uint64_t ptr,CThostFtdcTransferSerialField * pTransferSerial,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryAccountregister(uint64_t ptr,CThostFtdcAccountregisterField * pAccountregister,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspError(uint64_t ptr,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRtnOrder(uint64_t ptr,CThostFtdcOrderField * pOrder);

  void tdOnRtnTrade(uint64_t ptr,CThostFtdcTradeField * pTrade);

  void tdOnErrRtnOrderInsert(uint64_t ptr,CThostFtdcInputOrderField * pInputOrder,CThostFtdcRspInfoField * pRspInfo);

  void tdOnErrRtnOrderAction(uint64_t ptr,CThostFtdcOrderActionField * pOrderAction,CThostFtdcRspInfoField * pRspInfo);

  void tdOnRtnInstrumentStatus(uint64_t ptr,CThostFtdcInstrumentStatusField * pInstrumentStatus);

  void tdOnRtnBulletin(uint64_t ptr,CThostFtdcBulletinField * pBulletin);

  void tdOnRtnTradingNotice(uint64_t ptr,CThostFtdcTradingNoticeInfoField * pTradingNoticeInfo);

  void tdOnRtnErrorConditionalOrder(uint64_t ptr,CThostFtdcErrorConditionalOrderField * pErrorConditionalOrder);

  void tdOnRtnExecOrder(uint64_t ptr,CThostFtdcExecOrderField * pExecOrder);

  void tdOnErrRtnExecOrderInsert(uint64_t ptr,CThostFtdcInputExecOrderField * pInputExecOrder,CThostFtdcRspInfoField * pRspInfo);

  void tdOnErrRtnExecOrderAction(uint64_t ptr,CThostFtdcExecOrderActionField * pExecOrderAction,CThostFtdcRspInfoField * pRspInfo);

  void tdOnErrRtnForQuoteInsert(uint64_t ptr,CThostFtdcInputForQuoteField * pInputForQuote,CThostFtdcRspInfoField * pRspInfo);

  void tdOnRtnQuote(uint64_t ptr,CThostFtdcQuoteField * pQuote);

  void tdOnErrRtnQuoteInsert(uint64_t ptr,CThostFtdcInputQuoteField * pInputQuote,CThostFtdcRspInfoField * pRspInfo);

  void tdOnErrRtnQuoteAction(uint64_t ptr,CThostFtdcQuoteActionField * pQuoteAction,CThostFtdcRspInfoField * pRspInfo);

  void tdOnRtnForQuoteRsp(uint64_t ptr,CThostFtdcForQuoteRspField * pForQuoteRsp);

  void tdOnRtnCFMMCTradingAccountToken(uint64_t ptr,CThostFtdcCFMMCTradingAccountTokenField * pCFMMCTradingAccountToken);

  void tdOnErrRtnBatchOrderAction(uint64_t ptr,CThostFtdcBatchOrderActionField * pBatchOrderAction,CThostFtdcRspInfoField * pRspInfo);

  void tdOnRtnOptionSelfClose(uint64_t ptr,CThostFtdcOptionSelfCloseField * pOptionSelfClose);

  void tdOnErrRtnOptionSelfCloseInsert(uint64_t ptr,CThostFtdcInputOptionSelfCloseField * pInputOptionSelfClose,CThostFtdcRspInfoField * pRspInfo);

  void tdOnErrRtnOptionSelfCloseAction(uint64_t ptr,CThostFtdcOptionSelfCloseActionField * pOptionSelfCloseAction,CThostFtdcRspInfoField * pRspInfo);

  void tdOnRtnCombAction(uint64_t ptr,CThostFtdcCombActionField * pCombAction);

  void tdOnErrRtnCombActionInsert(uint64_t ptr,CThostFtdcInputCombActionField * pInputCombAction,CThostFtdcRspInfoField * pRspInfo);

  void tdOnRspQryContractBank(uint64_t ptr,CThostFtdcContractBankField * pContractBank,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryParkedOrder(uint64_t ptr,CThostFtdcParkedOrderField * pParkedOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryParkedOrderAction(uint64_t ptr,CThostFtdcParkedOrderActionField * pParkedOrderAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryTradingNotice(uint64_t ptr,CThostFtdcTradingNoticeField * pTradingNotice,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryBrokerTradingParams(uint64_t ptr,CThostFtdcBrokerTradingParamsField * pBrokerTradingParams,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryBrokerTradingAlgos(uint64_t ptr,CThostFtdcBrokerTradingAlgosField * pBrokerTradingAlgos,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQueryCFMMCTradingAccountToken(uint64_t ptr,CThostFtdcQueryCFMMCTradingAccountTokenField * pQueryCFMMCTradingAccountToken,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRtnFromBankToFutureByBank(uint64_t ptr,CThostFtdcRspTransferField * pRspTransfer);

  void tdOnRtnFromFutureToBankByBank(uint64_t ptr,CThostFtdcRspTransferField * pRspTransfer);

  void tdOnRtnRepealFromBankToFutureByBank(uint64_t ptr,CThostFtdcRspRepealField * pRspRepeal);

  void tdOnRtnRepealFromFutureToBankByBank(uint64_t ptr,CThostFtdcRspRepealField * pRspRepeal);

  void tdOnRtnFromBankToFutureByFuture(uint64_t ptr,CThostFtdcRspTransferField * pRspTransfer);

  void tdOnRtnFromFutureToBankByFuture(uint64_t ptr,CThostFtdcRspTransferField * pRspTransfer);

  void tdOnRtnRepealFromBankToFutureByFutureManual(uint64_t ptr,CThostFtdcRspRepealField * pRspRepeal);

  void tdOnRtnRepealFromFutureToBankByFutureManual(uint64_t ptr,CThostFtdcRspRepealField * pRspRepeal);

  void tdOnRtnQueryBankBalanceByFuture(uint64_t ptr,CThostFtdcNotifyQueryAccountField * pNotifyQueryAccount);

  void tdOnErrRtnBankToFutureByFuture(uint64_t ptr,CThostFtdcReqTransferField * pReqTransfer,CThostFtdcRspInfoField * pRspInfo);

  void tdOnErrRtnFutureToBankByFuture(uint64_t ptr,CThostFtdcReqTransferField * pReqTransfer,CThostFtdcRspInfoField * pRspInfo);

  void tdOnErrRtnRepealBankToFutureByFutureManual(uint64_t ptr,CThostFtdcReqRepealField * pReqRepeal,CThostFtdcRspInfoField * pRspInfo);

  void tdOnErrRtnRepealFutureToBankByFutureManual(uint64_t ptr,CThostFtdcReqRepealField * pReqRepeal,CThostFtdcRspInfoField * pRspInfo);

  void tdOnErrRtnQueryBankBalanceByFuture(uint64_t ptr,CThostFtdcReqQueryAccountField * pReqQueryAccount,CThostFtdcRspInfoField * pRspInfo);

  void tdOnRtnRepealFromBankToFutureByFuture(uint64_t ptr,CThostFtdcRspRepealField * pRspRepeal);

  void tdOnRtnRepealFromFutureToBankByFuture(uint64_t ptr,CThostFtdcRspRepealField * pRspRepeal);

  void tdOnRspFromBankToFutureByFuture(uint64_t ptr,CThostFtdcReqTransferField * pReqTransfer,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspFromFutureToBankByFuture(uint64_t ptr,CThostFtdcReqTransferField * pReqTransfer,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQueryBankAccountMoneyByFuture(uint64_t ptr,CThostFtdcReqQueryAccountField * pReqQueryAccount,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRtnOpenAccountByBank(uint64_t ptr,CThostFtdcOpenAccountField * pOpenAccount);

  void tdOnRtnCancelAccountByBank(uint64_t ptr,CThostFtdcCancelAccountField * pCancelAccount);

  void tdOnRtnChangeAccountByBank(uint64_t ptr,CThostFtdcChangeAccountField * pChangeAccount);

  void tdOnRspQryClassifiedInstrument(uint64_t ptr,CThostFtdcInstrumentField * pInstrument,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryCombPromotionParam(uint64_t ptr,CThostFtdcCombPromotionParamField * pCombPromotionParam,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryRiskSettleInvstPosition(uint64_t ptr,CThostFtdcRiskSettleInvstPositionField * pRiskSettleInvstPosition,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryRiskSettleProductStatus(uint64_t ptr,CThostFtdcRiskSettleProductStatusField * pRiskSettleProductStatus,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQrySPBMFutureParameter(uint64_t ptr,CThostFtdcSPBMFutureParameterField * pSPBMFutureParameter,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQrySPBMOptionParameter(uint64_t ptr,CThostFtdcSPBMOptionParameterField * pSPBMOptionParameter,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQrySPBMIntraParameter(uint64_t ptr,CThostFtdcSPBMIntraParameterField * pSPBMIntraParameter,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQrySPBMInterParameter(uint64_t ptr,CThostFtdcSPBMInterParameterField * pSPBMInterParameter,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQrySPBMPortfDefinition(uint64_t ptr,CThostFtdcSPBMPortfDefinitionField * pSPBMPortfDefinition,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQrySPBMInvestorPortfDef(uint64_t ptr,CThostFtdcSPBMInvestorPortfDefField * pSPBMInvestorPortfDef,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryInvestorPortfMarginRatio(uint64_t ptr,CThostFtdcInvestorPortfMarginRatioField * pInvestorPortfMarginRatio,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

  void tdOnRspQryInvestorProdSPBMDetail(uint64_t ptr,CThostFtdcInvestorProdSPBMDetailField * pInvestorProdSPBMDetail,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast);

}

CThostFtdcTraderSpiImpl::CThostFtdcTraderSpiImpl(uint64_t ptr):ptr(ptr){
}

CThostFtdcTraderSpiImpl::~CThostFtdcTraderSpiImpl(){
}


void CThostFtdcTraderSpiImpl::OnFrontConnected()
{
  tdOnFrontConnected(ptr);

}

void CThostFtdcTraderSpiImpl::OnFrontDisconnected(int nReason)
{
  tdOnFrontDisconnected(ptr,nReason);

}

void CThostFtdcTraderSpiImpl::OnHeartBeatWarning(int nTimeLapse)
{
  tdOnHeartBeatWarning(ptr,nTimeLapse);

}

void CThostFtdcTraderSpiImpl::OnRspAuthenticate(CThostFtdcRspAuthenticateField * pRspAuthenticateField,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspAuthenticate(ptr,pRspAuthenticateField,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspUserLogin(CThostFtdcRspUserLoginField * pRspUserLogin,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspUserLogin(ptr,pRspUserLogin,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspUserLogout(CThostFtdcUserLogoutField * pUserLogout,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspUserLogout(ptr,pUserLogout,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspUserPasswordUpdate(CThostFtdcUserPasswordUpdateField * pUserPasswordUpdate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspUserPasswordUpdate(ptr,pUserPasswordUpdate,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspTradingAccountPasswordUpdate(CThostFtdcTradingAccountPasswordUpdateField * pTradingAccountPasswordUpdate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspTradingAccountPasswordUpdate(ptr,pTradingAccountPasswordUpdate,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspUserAuthMethod(CThostFtdcRspUserAuthMethodField * pRspUserAuthMethod,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspUserAuthMethod(ptr,pRspUserAuthMethod,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspGenUserCaptcha(CThostFtdcRspGenUserCaptchaField * pRspGenUserCaptcha,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspGenUserCaptcha(ptr,pRspGenUserCaptcha,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspGenUserText(CThostFtdcRspGenUserTextField * pRspGenUserText,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspGenUserText(ptr,pRspGenUserText,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspOrderInsert(CThostFtdcInputOrderField * pInputOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspOrderInsert(ptr,pInputOrder,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspParkedOrderInsert(CThostFtdcParkedOrderField * pParkedOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspParkedOrderInsert(ptr,pParkedOrder,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspParkedOrderAction(CThostFtdcParkedOrderActionField * pParkedOrderAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspParkedOrderAction(ptr,pParkedOrderAction,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspOrderAction(CThostFtdcInputOrderActionField * pInputOrderAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspOrderAction(ptr,pInputOrderAction,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryMaxOrderVolume(CThostFtdcQryMaxOrderVolumeField * pQryMaxOrderVolume,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryMaxOrderVolume(ptr,pQryMaxOrderVolume,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspSettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField * pSettlementInfoConfirm,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspSettlementInfoConfirm(ptr,pSettlementInfoConfirm,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspRemoveParkedOrder(CThostFtdcRemoveParkedOrderField * pRemoveParkedOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspRemoveParkedOrder(ptr,pRemoveParkedOrder,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspRemoveParkedOrderAction(CThostFtdcRemoveParkedOrderActionField * pRemoveParkedOrderAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspRemoveParkedOrderAction(ptr,pRemoveParkedOrderAction,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspExecOrderInsert(CThostFtdcInputExecOrderField * pInputExecOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspExecOrderInsert(ptr,pInputExecOrder,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspExecOrderAction(CThostFtdcInputExecOrderActionField * pInputExecOrderAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspExecOrderAction(ptr,pInputExecOrderAction,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspForQuoteInsert(CThostFtdcInputForQuoteField * pInputForQuote,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspForQuoteInsert(ptr,pInputForQuote,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQuoteInsert(CThostFtdcInputQuoteField * pInputQuote,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQuoteInsert(ptr,pInputQuote,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQuoteAction(CThostFtdcInputQuoteActionField * pInputQuoteAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQuoteAction(ptr,pInputQuoteAction,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspBatchOrderAction(CThostFtdcInputBatchOrderActionField * pInputBatchOrderAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspBatchOrderAction(ptr,pInputBatchOrderAction,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspOptionSelfCloseInsert(CThostFtdcInputOptionSelfCloseField * pInputOptionSelfClose,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspOptionSelfCloseInsert(ptr,pInputOptionSelfClose,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspOptionSelfCloseAction(CThostFtdcInputOptionSelfCloseActionField * pInputOptionSelfCloseAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspOptionSelfCloseAction(ptr,pInputOptionSelfCloseAction,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspCombActionInsert(CThostFtdcInputCombActionField * pInputCombAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspCombActionInsert(ptr,pInputCombAction,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryOrder(CThostFtdcOrderField * pOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryOrder(ptr,pOrder,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryTrade(CThostFtdcTradeField * pTrade,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryTrade(ptr,pTrade,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryInvestorPosition(CThostFtdcInvestorPositionField * pInvestorPosition,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryInvestorPosition(ptr,pInvestorPosition,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryTradingAccount(CThostFtdcTradingAccountField * pTradingAccount,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryTradingAccount(ptr,pTradingAccount,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryInvestor(CThostFtdcInvestorField * pInvestor,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryInvestor(ptr,pInvestor,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryTradingCode(CThostFtdcTradingCodeField * pTradingCode,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryTradingCode(ptr,pTradingCode,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryInstrumentMarginRate(CThostFtdcInstrumentMarginRateField * pInstrumentMarginRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryInstrumentMarginRate(ptr,pInstrumentMarginRate,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryInstrumentCommissionRate(CThostFtdcInstrumentCommissionRateField * pInstrumentCommissionRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryInstrumentCommissionRate(ptr,pInstrumentCommissionRate,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryExchange(CThostFtdcExchangeField * pExchange,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryExchange(ptr,pExchange,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryProduct(CThostFtdcProductField * pProduct,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryProduct(ptr,pProduct,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryInstrument(CThostFtdcInstrumentField * pInstrument,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryInstrument(ptr,pInstrument,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryDepthMarketData(CThostFtdcDepthMarketDataField * pDepthMarketData,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryDepthMarketData(ptr,pDepthMarketData,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryTraderOffer(CThostFtdcTraderOfferField * pTraderOffer,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryTraderOffer(ptr,pTraderOffer,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQrySettlementInfo(CThostFtdcSettlementInfoField * pSettlementInfo,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQrySettlementInfo(ptr,pSettlementInfo,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryTransferBank(CThostFtdcTransferBankField * pTransferBank,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryTransferBank(ptr,pTransferBank,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryInvestorPositionDetail(CThostFtdcInvestorPositionDetailField * pInvestorPositionDetail,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryInvestorPositionDetail(ptr,pInvestorPositionDetail,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryNotice(CThostFtdcNoticeField * pNotice,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryNotice(ptr,pNotice,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQrySettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField * pSettlementInfoConfirm,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQrySettlementInfoConfirm(ptr,pSettlementInfoConfirm,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryInvestorPositionCombineDetail(CThostFtdcInvestorPositionCombineDetailField * pInvestorPositionCombineDetail,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryInvestorPositionCombineDetail(ptr,pInvestorPositionCombineDetail,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryCFMMCTradingAccountKey(CThostFtdcCFMMCTradingAccountKeyField * pCFMMCTradingAccountKey,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryCFMMCTradingAccountKey(ptr,pCFMMCTradingAccountKey,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryEWarrantOffset(CThostFtdcEWarrantOffsetField * pEWarrantOffset,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryEWarrantOffset(ptr,pEWarrantOffset,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryInvestorProductGroupMargin(CThostFtdcInvestorProductGroupMarginField * pInvestorProductGroupMargin,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryInvestorProductGroupMargin(ptr,pInvestorProductGroupMargin,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryExchangeMarginRate(CThostFtdcExchangeMarginRateField * pExchangeMarginRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryExchangeMarginRate(ptr,pExchangeMarginRate,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryExchangeMarginRateAdjust(CThostFtdcExchangeMarginRateAdjustField * pExchangeMarginRateAdjust,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryExchangeMarginRateAdjust(ptr,pExchangeMarginRateAdjust,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryExchangeRate(CThostFtdcExchangeRateField * pExchangeRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryExchangeRate(ptr,pExchangeRate,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQrySecAgentACIDMap(CThostFtdcSecAgentACIDMapField * pSecAgentACIDMap,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQrySecAgentACIDMap(ptr,pSecAgentACIDMap,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryProductExchRate(CThostFtdcProductExchRateField * pProductExchRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryProductExchRate(ptr,pProductExchRate,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryProductGroup(CThostFtdcProductGroupField * pProductGroup,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryProductGroup(ptr,pProductGroup,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryMMInstrumentCommissionRate(CThostFtdcMMInstrumentCommissionRateField * pMMInstrumentCommissionRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryMMInstrumentCommissionRate(ptr,pMMInstrumentCommissionRate,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryMMOptionInstrCommRate(CThostFtdcMMOptionInstrCommRateField * pMMOptionInstrCommRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryMMOptionInstrCommRate(ptr,pMMOptionInstrCommRate,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryInstrumentOrderCommRate(CThostFtdcInstrumentOrderCommRateField * pInstrumentOrderCommRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryInstrumentOrderCommRate(ptr,pInstrumentOrderCommRate,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQrySecAgentTradingAccount(CThostFtdcTradingAccountField * pTradingAccount,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQrySecAgentTradingAccount(ptr,pTradingAccount,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQrySecAgentCheckMode(CThostFtdcSecAgentCheckModeField * pSecAgentCheckMode,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQrySecAgentCheckMode(ptr,pSecAgentCheckMode,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQrySecAgentTradeInfo(CThostFtdcSecAgentTradeInfoField * pSecAgentTradeInfo,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQrySecAgentTradeInfo(ptr,pSecAgentTradeInfo,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryOptionInstrTradeCost(CThostFtdcOptionInstrTradeCostField * pOptionInstrTradeCost,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryOptionInstrTradeCost(ptr,pOptionInstrTradeCost,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryOptionInstrCommRate(CThostFtdcOptionInstrCommRateField * pOptionInstrCommRate,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryOptionInstrCommRate(ptr,pOptionInstrCommRate,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryExecOrder(CThostFtdcExecOrderField * pExecOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryExecOrder(ptr,pExecOrder,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryForQuote(CThostFtdcForQuoteField * pForQuote,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryForQuote(ptr,pForQuote,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryQuote(CThostFtdcQuoteField * pQuote,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryQuote(ptr,pQuote,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryOptionSelfClose(CThostFtdcOptionSelfCloseField * pOptionSelfClose,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryOptionSelfClose(ptr,pOptionSelfClose,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryInvestUnit(CThostFtdcInvestUnitField * pInvestUnit,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryInvestUnit(ptr,pInvestUnit,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryCombInstrumentGuard(CThostFtdcCombInstrumentGuardField * pCombInstrumentGuard,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryCombInstrumentGuard(ptr,pCombInstrumentGuard,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryCombAction(CThostFtdcCombActionField * pCombAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryCombAction(ptr,pCombAction,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryTransferSerial(CThostFtdcTransferSerialField * pTransferSerial,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryTransferSerial(ptr,pTransferSerial,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryAccountregister(CThostFtdcAccountregisterField * pAccountregister,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryAccountregister(ptr,pAccountregister,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspError(CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspError(ptr,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRtnOrder(CThostFtdcOrderField * pOrder)
{
  tdOnRtnOrder(ptr,pOrder);

}

void CThostFtdcTraderSpiImpl::OnRtnTrade(CThostFtdcTradeField * pTrade)
{
  tdOnRtnTrade(ptr,pTrade);

}

void CThostFtdcTraderSpiImpl::OnErrRtnOrderInsert(CThostFtdcInputOrderField * pInputOrder,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnOrderInsert(ptr,pInputOrder,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnErrRtnOrderAction(CThostFtdcOrderActionField * pOrderAction,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnOrderAction(ptr,pOrderAction,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnRtnInstrumentStatus(CThostFtdcInstrumentStatusField * pInstrumentStatus)
{
  tdOnRtnInstrumentStatus(ptr,pInstrumentStatus);

}

void CThostFtdcTraderSpiImpl::OnRtnBulletin(CThostFtdcBulletinField * pBulletin)
{
  tdOnRtnBulletin(ptr,pBulletin);

}

void CThostFtdcTraderSpiImpl::OnRtnTradingNotice(CThostFtdcTradingNoticeInfoField * pTradingNoticeInfo)
{
  tdOnRtnTradingNotice(ptr,pTradingNoticeInfo);

}

void CThostFtdcTraderSpiImpl::OnRtnErrorConditionalOrder(CThostFtdcErrorConditionalOrderField * pErrorConditionalOrder)
{
  tdOnRtnErrorConditionalOrder(ptr,pErrorConditionalOrder);

}

void CThostFtdcTraderSpiImpl::OnRtnExecOrder(CThostFtdcExecOrderField * pExecOrder)
{
  tdOnRtnExecOrder(ptr,pExecOrder);

}

void CThostFtdcTraderSpiImpl::OnErrRtnExecOrderInsert(CThostFtdcInputExecOrderField * pInputExecOrder,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnExecOrderInsert(ptr,pInputExecOrder,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnErrRtnExecOrderAction(CThostFtdcExecOrderActionField * pExecOrderAction,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnExecOrderAction(ptr,pExecOrderAction,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnErrRtnForQuoteInsert(CThostFtdcInputForQuoteField * pInputForQuote,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnForQuoteInsert(ptr,pInputForQuote,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnRtnQuote(CThostFtdcQuoteField * pQuote)
{
  tdOnRtnQuote(ptr,pQuote);

}

void CThostFtdcTraderSpiImpl::OnErrRtnQuoteInsert(CThostFtdcInputQuoteField * pInputQuote,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnQuoteInsert(ptr,pInputQuote,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnErrRtnQuoteAction(CThostFtdcQuoteActionField * pQuoteAction,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnQuoteAction(ptr,pQuoteAction,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnRtnForQuoteRsp(CThostFtdcForQuoteRspField * pForQuoteRsp)
{
  tdOnRtnForQuoteRsp(ptr,pForQuoteRsp);

}

void CThostFtdcTraderSpiImpl::OnRtnCFMMCTradingAccountToken(CThostFtdcCFMMCTradingAccountTokenField * pCFMMCTradingAccountToken)
{
  tdOnRtnCFMMCTradingAccountToken(ptr,pCFMMCTradingAccountToken);

}

void CThostFtdcTraderSpiImpl::OnErrRtnBatchOrderAction(CThostFtdcBatchOrderActionField * pBatchOrderAction,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnBatchOrderAction(ptr,pBatchOrderAction,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnRtnOptionSelfClose(CThostFtdcOptionSelfCloseField * pOptionSelfClose)
{
  tdOnRtnOptionSelfClose(ptr,pOptionSelfClose);

}

void CThostFtdcTraderSpiImpl::OnErrRtnOptionSelfCloseInsert(CThostFtdcInputOptionSelfCloseField * pInputOptionSelfClose,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnOptionSelfCloseInsert(ptr,pInputOptionSelfClose,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnErrRtnOptionSelfCloseAction(CThostFtdcOptionSelfCloseActionField * pOptionSelfCloseAction,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnOptionSelfCloseAction(ptr,pOptionSelfCloseAction,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnRtnCombAction(CThostFtdcCombActionField * pCombAction)
{
  tdOnRtnCombAction(ptr,pCombAction);

}

void CThostFtdcTraderSpiImpl::OnErrRtnCombActionInsert(CThostFtdcInputCombActionField * pInputCombAction,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnCombActionInsert(ptr,pInputCombAction,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnRspQryContractBank(CThostFtdcContractBankField * pContractBank,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryContractBank(ptr,pContractBank,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryParkedOrder(CThostFtdcParkedOrderField * pParkedOrder,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryParkedOrder(ptr,pParkedOrder,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryParkedOrderAction(CThostFtdcParkedOrderActionField * pParkedOrderAction,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryParkedOrderAction(ptr,pParkedOrderAction,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryTradingNotice(CThostFtdcTradingNoticeField * pTradingNotice,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryTradingNotice(ptr,pTradingNotice,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryBrokerTradingParams(CThostFtdcBrokerTradingParamsField * pBrokerTradingParams,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryBrokerTradingParams(ptr,pBrokerTradingParams,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryBrokerTradingAlgos(CThostFtdcBrokerTradingAlgosField * pBrokerTradingAlgos,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryBrokerTradingAlgos(ptr,pBrokerTradingAlgos,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQueryCFMMCTradingAccountToken(CThostFtdcQueryCFMMCTradingAccountTokenField * pQueryCFMMCTradingAccountToken,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQueryCFMMCTradingAccountToken(ptr,pQueryCFMMCTradingAccountToken,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRtnFromBankToFutureByBank(CThostFtdcRspTransferField * pRspTransfer)
{
  tdOnRtnFromBankToFutureByBank(ptr,pRspTransfer);

}

void CThostFtdcTraderSpiImpl::OnRtnFromFutureToBankByBank(CThostFtdcRspTransferField * pRspTransfer)
{
  tdOnRtnFromFutureToBankByBank(ptr,pRspTransfer);

}

void CThostFtdcTraderSpiImpl::OnRtnRepealFromBankToFutureByBank(CThostFtdcRspRepealField * pRspRepeal)
{
  tdOnRtnRepealFromBankToFutureByBank(ptr,pRspRepeal);

}

void CThostFtdcTraderSpiImpl::OnRtnRepealFromFutureToBankByBank(CThostFtdcRspRepealField * pRspRepeal)
{
  tdOnRtnRepealFromFutureToBankByBank(ptr,pRspRepeal);

}

void CThostFtdcTraderSpiImpl::OnRtnFromBankToFutureByFuture(CThostFtdcRspTransferField * pRspTransfer)
{
  tdOnRtnFromBankToFutureByFuture(ptr,pRspTransfer);

}

void CThostFtdcTraderSpiImpl::OnRtnFromFutureToBankByFuture(CThostFtdcRspTransferField * pRspTransfer)
{
  tdOnRtnFromFutureToBankByFuture(ptr,pRspTransfer);

}

void CThostFtdcTraderSpiImpl::OnRtnRepealFromBankToFutureByFutureManual(CThostFtdcRspRepealField * pRspRepeal)
{
  tdOnRtnRepealFromBankToFutureByFutureManual(ptr,pRspRepeal);

}

void CThostFtdcTraderSpiImpl::OnRtnRepealFromFutureToBankByFutureManual(CThostFtdcRspRepealField * pRspRepeal)
{
  tdOnRtnRepealFromFutureToBankByFutureManual(ptr,pRspRepeal);

}

void CThostFtdcTraderSpiImpl::OnRtnQueryBankBalanceByFuture(CThostFtdcNotifyQueryAccountField * pNotifyQueryAccount)
{
  tdOnRtnQueryBankBalanceByFuture(ptr,pNotifyQueryAccount);

}

void CThostFtdcTraderSpiImpl::OnErrRtnBankToFutureByFuture(CThostFtdcReqTransferField * pReqTransfer,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnBankToFutureByFuture(ptr,pReqTransfer,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnErrRtnFutureToBankByFuture(CThostFtdcReqTransferField * pReqTransfer,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnFutureToBankByFuture(ptr,pReqTransfer,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnErrRtnRepealBankToFutureByFutureManual(CThostFtdcReqRepealField * pReqRepeal,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnRepealBankToFutureByFutureManual(ptr,pReqRepeal,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnErrRtnRepealFutureToBankByFutureManual(CThostFtdcReqRepealField * pReqRepeal,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnRepealFutureToBankByFutureManual(ptr,pReqRepeal,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnErrRtnQueryBankBalanceByFuture(CThostFtdcReqQueryAccountField * pReqQueryAccount,CThostFtdcRspInfoField * pRspInfo)
{
  tdOnErrRtnQueryBankBalanceByFuture(ptr,pReqQueryAccount,pRspInfo);

}

void CThostFtdcTraderSpiImpl::OnRtnRepealFromBankToFutureByFuture(CThostFtdcRspRepealField * pRspRepeal)
{
  tdOnRtnRepealFromBankToFutureByFuture(ptr,pRspRepeal);

}

void CThostFtdcTraderSpiImpl::OnRtnRepealFromFutureToBankByFuture(CThostFtdcRspRepealField * pRspRepeal)
{
  tdOnRtnRepealFromFutureToBankByFuture(ptr,pRspRepeal);

}

void CThostFtdcTraderSpiImpl::OnRspFromBankToFutureByFuture(CThostFtdcReqTransferField * pReqTransfer,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspFromBankToFutureByFuture(ptr,pReqTransfer,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspFromFutureToBankByFuture(CThostFtdcReqTransferField * pReqTransfer,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspFromFutureToBankByFuture(ptr,pReqTransfer,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQueryBankAccountMoneyByFuture(CThostFtdcReqQueryAccountField * pReqQueryAccount,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQueryBankAccountMoneyByFuture(ptr,pReqQueryAccount,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRtnOpenAccountByBank(CThostFtdcOpenAccountField * pOpenAccount)
{
  tdOnRtnOpenAccountByBank(ptr,pOpenAccount);

}

void CThostFtdcTraderSpiImpl::OnRtnCancelAccountByBank(CThostFtdcCancelAccountField * pCancelAccount)
{
  tdOnRtnCancelAccountByBank(ptr,pCancelAccount);

}

void CThostFtdcTraderSpiImpl::OnRtnChangeAccountByBank(CThostFtdcChangeAccountField * pChangeAccount)
{
  tdOnRtnChangeAccountByBank(ptr,pChangeAccount);

}

void CThostFtdcTraderSpiImpl::OnRspQryClassifiedInstrument(CThostFtdcInstrumentField * pInstrument,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryClassifiedInstrument(ptr,pInstrument,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryCombPromotionParam(CThostFtdcCombPromotionParamField * pCombPromotionParam,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryCombPromotionParam(ptr,pCombPromotionParam,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryRiskSettleInvstPosition(CThostFtdcRiskSettleInvstPositionField * pRiskSettleInvstPosition,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryRiskSettleInvstPosition(ptr,pRiskSettleInvstPosition,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryRiskSettleProductStatus(CThostFtdcRiskSettleProductStatusField * pRiskSettleProductStatus,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryRiskSettleProductStatus(ptr,pRiskSettleProductStatus,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQrySPBMFutureParameter(CThostFtdcSPBMFutureParameterField * pSPBMFutureParameter,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQrySPBMFutureParameter(ptr,pSPBMFutureParameter,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQrySPBMOptionParameter(CThostFtdcSPBMOptionParameterField * pSPBMOptionParameter,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQrySPBMOptionParameter(ptr,pSPBMOptionParameter,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQrySPBMIntraParameter(CThostFtdcSPBMIntraParameterField * pSPBMIntraParameter,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQrySPBMIntraParameter(ptr,pSPBMIntraParameter,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQrySPBMInterParameter(CThostFtdcSPBMInterParameterField * pSPBMInterParameter,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQrySPBMInterParameter(ptr,pSPBMInterParameter,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQrySPBMPortfDefinition(CThostFtdcSPBMPortfDefinitionField * pSPBMPortfDefinition,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQrySPBMPortfDefinition(ptr,pSPBMPortfDefinition,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQrySPBMInvestorPortfDef(CThostFtdcSPBMInvestorPortfDefField * pSPBMInvestorPortfDef,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQrySPBMInvestorPortfDef(ptr,pSPBMInvestorPortfDef,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryInvestorPortfMarginRatio(CThostFtdcInvestorPortfMarginRatioField * pInvestorPortfMarginRatio,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryInvestorPortfMarginRatio(ptr,pInvestorPortfMarginRatio,pRspInfo,nRequestID,bIsLast);

}

void CThostFtdcTraderSpiImpl::OnRspQryInvestorProdSPBMDetail(CThostFtdcInvestorProdSPBMDetailField * pInvestorProdSPBMDetail,CThostFtdcRspInfoField * pRspInfo,int nRequestID,bool bIsLast)
{
  tdOnRspQryInvestorProdSPBMDetail(ptr,pInvestorProdSPBMDetail,pRspInfo,nRequestID,bIsLast);

}
